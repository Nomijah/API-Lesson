// <auto-generated />
using System;
using Lektion_SUT24_250414_API_intro.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Lektion_SUT24_250414_API_intro.Migrations
{
    [DbContext(typeof(MovieDbContext))]
    [Migration("20250417102116_RelationModel")]
    partial class RelationModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ActorMovie", b =>
                {
                    b.Property<int>("ActorsId")
                        .HasColumnType("int");

                    b.Property<int>("MoviesId")
                        .HasColumnType("int");

                    b.HasKey("ActorsId", "MoviesId");

                    b.HasIndex("MoviesId");

                    b.ToTable("ActorMovie");
                });

            modelBuilder.Entity("Lektion_SUT24_250414_API_intro.Models.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BirthYear")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Actors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthYear = 1974,
                            FirstName = "Leonardo",
                            LastName = "DiCaprio"
                        },
                        new
                        {
                            Id = 2,
                            BirthYear = 1981,
                            FirstName = "Joseph",
                            LastName = "Gordon-Levitt"
                        },
                        new
                        {
                            Id = 3,
                            BirthYear = 1987,
                            FirstName = "Elliot",
                            LastName = "Page"
                        },
                        new
                        {
                            Id = 4,
                            BirthYear = 1924,
                            FirstName = "Marlon",
                            LastName = "Brando"
                        },
                        new
                        {
                            Id = 5,
                            BirthYear = 1940,
                            FirstName = "Al",
                            LastName = "Pacino"
                        },
                        new
                        {
                            Id = 6,
                            BirthYear = 1940,
                            FirstName = "James",
                            LastName = "Caan"
                        },
                        new
                        {
                            Id = 7,
                            BirthYear = 1974,
                            FirstName = "Christian",
                            LastName = "Bale"
                        },
                        new
                        {
                            Id = 8,
                            BirthYear = 1979,
                            FirstName = "Heath",
                            LastName = "Ledger"
                        },
                        new
                        {
                            Id = 9,
                            BirthYear = 1968,
                            FirstName = "Aaron",
                            LastName = "Eckhart"
                        });
                });

            modelBuilder.Entity("Lektion_SUT24_250414_API_intro.Models.ActorMovie", b =>
                {
                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("ActorId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("ActorMovies");

                    b.HasData(
                        new
                        {
                            ActorId = 1,
                            MovieId = 1
                        },
                        new
                        {
                            ActorId = 2,
                            MovieId = 1
                        },
                        new
                        {
                            ActorId = 3,
                            MovieId = 1
                        },
                        new
                        {
                            ActorId = 4,
                            MovieId = 2
                        },
                        new
                        {
                            ActorId = 5,
                            MovieId = 2
                        },
                        new
                        {
                            ActorId = 6,
                            MovieId = 2
                        },
                        new
                        {
                            ActorId = 7,
                            MovieId = 3
                        },
                        new
                        {
                            ActorId = 8,
                            MovieId = 3
                        },
                        new
                        {
                            ActorId = 9,
                            MovieId = 3
                        });
                });

            modelBuilder.Entity("Lektion_SUT24_250414_API_intro.Models.Director", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BirthYear")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Directors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthYear = 1970,
                            FirstName = "Christopher",
                            LastName = "Nolan"
                        },
                        new
                        {
                            Id = 2,
                            BirthYear = 1939,
                            FirstName = "Francis",
                            LastName = "Ford Coppola"
                        });
                });

            modelBuilder.Entity("Lektion_SUT24_250414_API_intro.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DirectorId")
                        .HasColumnType("int");

                    b.Property<string>("Genre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Length")
                        .HasColumnType("time");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DirectorId");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DirectorId = 1,
                            Genre = "Science Fiction",
                            Length = new TimeSpan(0, 2, 28, 0, 0),
                            Title = "Inception"
                        },
                        new
                        {
                            Id = 2,
                            DirectorId = 2,
                            Genre = "Crime",
                            Length = new TimeSpan(0, 2, 55, 0, 0),
                            Title = "The Godfather"
                        },
                        new
                        {
                            Id = 3,
                            DirectorId = 1,
                            Genre = "Action",
                            Length = new TimeSpan(0, 2, 32, 0, 0),
                            Title = "The Dark Knight"
                        });
                });

            modelBuilder.Entity("ActorMovie", b =>
                {
                    b.HasOne("Lektion_SUT24_250414_API_intro.Models.Actor", null)
                        .WithMany()
                        .HasForeignKey("ActorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lektion_SUT24_250414_API_intro.Models.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Lektion_SUT24_250414_API_intro.Models.ActorMovie", b =>
                {
                    b.HasOne("Lektion_SUT24_250414_API_intro.Models.Actor", "Actor")
                        .WithMany("ActorMovies")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lektion_SUT24_250414_API_intro.Models.Movie", "Movie")
                        .WithMany("ActorMovies")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Lektion_SUT24_250414_API_intro.Models.Movie", b =>
                {
                    b.HasOne("Lektion_SUT24_250414_API_intro.Models.Director", "Director")
                        .WithMany("Movies")
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Director");
                });

            modelBuilder.Entity("Lektion_SUT24_250414_API_intro.Models.Actor", b =>
                {
                    b.Navigation("ActorMovies");
                });

            modelBuilder.Entity("Lektion_SUT24_250414_API_intro.Models.Director", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("Lektion_SUT24_250414_API_intro.Models.Movie", b =>
                {
                    b.Navigation("ActorMovies");
                });
#pragma warning restore 612, 618
        }
    }
}
